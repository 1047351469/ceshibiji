4天

	数据库概念

	mysql navicat

	sql语句 查询

	mysql高级

1、概念

	1.1、数据库的作用

		用来存储数据，方便查询

	1.2、关系型数据库

		核心是用二维表存储数据

		行，记录，代表的是一条事物的信息
		列，字段，代表一条事物的某一个属性

		表可以存很多行
		数据库可以存很多表

	1.3、SQL

		结构化查询语言，操作关系型数据库

		不区分大小写，select Select

	1.4、MySQL
		
		瑞典公司开发，被卖给Sun，Sun又被卖给Oracle

		开源 免费 支持多平台

2、MySQL安装

	服务端：不能带中文路径

		启动  停止  重启


	客户端：

		命令行客户端

		navicat

3、navicat使用

	连接服务端

		输入ip、端口、用户名、密码

	数据库操作 

		创建  字符集用过utf8

		编辑  不能改名称

		删除


	数据表

		创建

		设计表 

			添加字段

			修改字段

			删除字段

		重命名

		删除

	数据操作

		添加 

		删除

		修改

		查询

4、数据类型与约束

	int ： 有符号范围（-2147483648 ~2147483647），无符号范围（0 ~ 4294967295），长度没有意义

	varchar ：varchar(3)表示最多存3个字符，一个中文或一个字母都占一个字符

	decimal ：decimal(5,2)表示共存5位数，小数占2位，整数占3位


	主键：字段值必须唯一，且不能为null，唯一标识某一条数据，一般字段名叫id，int类型、无符号、自动递增


5、sql语言

	表

		创建表

			create table 表名(
			字段名 类型 约束,
			字段名 类型 约束
			...
			)

			-- 注释 ctrl + /
			-- 取消注释 ctrl + shift + /

			例：创建学生表，字段要求如下：
			
			姓名(长度为10)

				create table students(
				name varchar(10)
				)

			例：创建学生表，字段要求如下：
			
			姓名(长度为10)， 年龄

				create table students2(
				name varchar(10),
				age int unsigned
				)


			例：创建学生表，字段要求如下：
			
			姓名(长度为10)， 年龄，身高(保留小数点2位)
			
				create table students3(
				id int unsigned primary key auto_increment,
				name varchar(10),
				age int unsigned,
				height decimal(5,2)
				)

		删除表

			如果表不存在，会报错
			drop table students

			如果表存在，才删除，不存在也不会报错
			drop table if exists students3;

			create table students3(
			id int unsigned primary key auto_increment,
			name varchar(10),
			age int unsigned,
			height decimal(5,2)
			)

	数据操作

		插入数据

			insert into 表名 values(...)
			例：插入一个学生，设置所有字段的信息

				insert into students3 values(0,'亚瑟',16,160.5)
				insert into students3 values(default,'亚瑟2',16,160.5)
				insert into students3 values(null,'亚瑟',16,160.5)

			给部分字段设置数据
				
				insert into students3(name) values('鲁班')

				insert into students3(name,age) values('鲁班2',30) 

			执行多条语句插入多条数据

				insert into students3 values(null,'亚瑟4',16,160.5);
				insert into students3 values(null,'亚瑟5',16,160.5);
				insert into students3 values(null,'亚瑟6',16,160.5)

			执行一条语句插入多条数据
				
				insert into students3(name) values('鲁班'),('鲁班2'),('鲁班3'),('鲁班4')

		更新数据

			格式：update 表名 set 列1=值1,列2=值2... where 条件
			例：修改id为5的学生数据，姓名改为 狄仁杰，年龄改为 20

				update students3 set age=10 where id=5

				update students3 set name='狄仁杰',age=22,height=123.246 where age=20

		删除数据

			格式：delete from 表名 where 条件
			例：删除id为6的学生数据

			delete from hero2 

			delete from students3 where id=12

		逻辑删除

			1、给表添加一个字段，名字叫isdelete int类型 ，0代表未删除，1代表删除

			2、把表中所有的数据isdelete字段改为0

			3、想删除数据时，使用update语句，把某条数据的isdelete字段改为1

				update students3 set isdelete=1 where id=5

			4、在查询数据时，只查询isdelete为0的数据

				select * from students3 where isdelete=0

	查询

		查询所有字段

			select * from 表名

			select * from students

		查询指定字段

			select name,hometown from students

		给字段取别名

			select name as 姓名,hometown as 家乡 from students
		
		给表取别名

			select stu.name,stu.hometown from students as stu

		去重，重复的记录只显示一条，当显示的一整行记录跟另一整行记录完全一样时，认为是重复的记录

			select distinct sex from students

			select distinct sex,class  from students


	比较运算


		例1：查询小乔的年龄

			select age from students where name='小乔'

		例2：查询20岁以下的学生

			select * from students where age<=20

		例3：查询家乡不在北京的学生

			select * from students where hometown<>'北京'

	逻辑运算

		例1：查询年龄小于20的女同学

			select * from students where age<20 and sex='女'

		例2：查询女学生或'1班'的学生

			select * from students where sex='女' or class='1班'

		例3：查询非天津的学生

			select * from students where not hometown='天津'

	模糊查询

		例1：查询姓孙的学生

			select * from students where name like '孙%'
		
		例2：查询姓孙且名字是一个字的学生

			select * from students where name like '孙__'

		例3：查询叫乔的学生

			select * from students where name like '%乔'

		例4：查询姓名含白的学生

			select * from students where name like '%白%'

	范围查询


		例1：查询家乡是北京或上海或广东的学生

			select * from students where hometown='北京' or hometown='上海' or hometown='广东'

			select * from students where hometown in ('北京','上海','广东')

		例2：查询年龄为18至20的学生

			select * from students where age in (18,19,20)

			select * from students where age between 18 and 20   小值在前，大值在后

			select * from students where age>=20 and age<=18

	空判断


		例1：查询没有填写身份证的学生

			select * from students where  card is null
		
		例2：查询填写了身份证的学生
		
			select * from students where  card is not null

		'' 代表插入的数据为空字符串

		insert into students values('013','凯','男','北京',20,'1班','')

		null 代表插入的值为空
		insert into students values('014','凯2','男','北京',20,'1班',null)

		插入数据时，如果一些字段没指定数据，默认为null
		insert into students(studentNo,name) values('015','凯3')

	排序


		例1：查询所有学生信息，按年龄从小到大排序

			select * from students order by age

		例2：查询所有学生信息，按年龄从大到小排序，年龄相同时，再按学号从小到大排序

			select * from students order by age desc,studentNo 

		对中文字段进行排序
		select * from students order by convert(name using gbk)

	聚合函数

		例1：查询学生总数

			count(*)代表如果一行记录中任何一个字段有值，就会统计在内
			select count(*) from students

			count(card)代表统计某一个列的个数，不会把null值统计在内
			select count(card) from students

		例2：查询女生的最大年龄

			select max(age) from students where sex='女'

		例3：查询1班的最小年龄

			select min(age) from students where class='1班'

		例4：查询北京学生的年龄总和

			select sum(age) from students where hometown='北京'

		例5：查询女生的平均年龄

			select avg(age) from students where sex='女'


	分组


		例1：查询各种性别的人数

			select sex,count(*) from students group by sex

		例2：查询各种年龄的人数

			select age,count(*) from students group by age


		例1：查询男生总人数    having必须放在group by 后面

			select count(*) from students where sex='男'

			select sex,count(*) from students group by sex having sex='男'



		查询1班除外其他班级学生的平均年龄、最大年龄、最小年龄

			select class,avg(age),max(age),min(age) from students where class!='1班' group by class

			select class,avg(age),max(age),min(age) from students group by class having class!='1班'


		按照多个字段分组，多个字段值一模一样时，认为是一组的

			select class,sex,count(*) from students group by class,sex

	获取部分行

			limit start,count  mysql中的第一条记录的位置是0

		例1：查询前3行学生信息  

			select * from students limit 1,2

			limit 2 就等于 limit 0,2

		分页

			每页显示4条


			1页
			
				select * from students limit 0,4  (n-1)*4

			2页
				
				select * from students limit 4,4  

			3页

				select * from students limit 8,4

	连接查询

		等值连接

			例1：查询学生信息及学生的成绩

				生成临时表，然后在临时表中使用关联的字段进行过滤

				select stu.name,sc.score from students as stu,scores as sc
				where stu.studentNo=sc.studentNo

				内连接，不生成临时表，连接时先判断条件，只有符合条件才会连接再放到结果

				select * from students as stu
				inner join scores as sc on stu.studentNo=sc.studentNo

			例2：查询课程信息及课程的成绩

				select * from scores,courses
				where scores.courseNo=courses.courseNo

				select * from courses
				inner join scores on scores.courseNo=courses.courseNo


			例3：查询学生信息及学生的课程对应的成绩


				select
					*
				from
					students,
					scores,
					courses
				where
				students.studentno = scores.studentno
				and scores.courseno = courses.courseno 

				select
					students. name,
					courses. name as coursename,
					scores.score
				from
					students
				inner join scores on students.studentno = scores.studentno
				inner join courses on scores.courseno = courses.courseno




